{"ast":null,"code":"import _regeneratorRuntime from \"/Users/diehernandez/Workspace/gps-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/diehernandez/Workspace/gps-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/diehernandez/Workspace/gps-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/diehernandez/Workspace/gps-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from 'axios';\n\nvar UsersService =\n/*#__PURE__*/\nfunction () {\n  function UsersService() {\n    _classCallCheck(this, UsersService);\n  }\n\n  _createClass(UsersService, [{\n    key: \"getVehiclesByUserID\",\n    value: function () {\n      var _getVehiclesByUserID = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(userID) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return new Promise(function (resolve) {\n                  setTimeout(function () {\n                    resolve({\n                      \"data\": mock\n                    });\n                  }, 500);\n                });\n\n              case 3:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(\"Error in function getDevicesByUserID. Message: \".concat(_context.t0));\n                return _context.abrupt(\"return\", null);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 6]]);\n      }));\n\n      function getVehiclesByUserID(_x) {\n        return _getVehiclesByUserID.apply(this, arguments);\n      }\n\n      return getVehiclesByUserID;\n    }()\n  }]);\n\n  return UsersService;\n}();\n\nexport { UsersService as default };\nvar mock = [{\n  \"id\": 10,\n  \"user_id\": 10,\n  \"device_id\": 1,\n  \"type\": \"Ford Fiesta\",\n  \"plate\": \"AA 383 TI\",\n  \"model\": \"2018\"\n}, {\n  \"id\": 2,\n  \"user_id\": 10,\n  \"device_id\": 3,\n  \"type\": \"Fiat Argo\",\n  \"plate\": \"AB 112 II\",\n  \"model\": \"2018\"\n}];","map":{"version":3,"sources":["/Users/diehernandez/Workspace/gps-front/src/api/services/usersService.js"],"names":["axios","UsersService","userID","Promise","resolve","setTimeout","mock","console","log"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEqBC,Y;;;;;;;;;;;;gDACOC,M;;;;;;;uBAGT,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAClCC,kBAAAA,UAAU,CAAC,YAAM;AACfD,oBAAAA,OAAO,CAAC;AAAC,8BAAQE;AAAT,qBAAD,CAAP;AACD,mBAFS,EAEP,GAFO,CAAV;AAGD,iBAJY,C;;;;;;;;AAMbC,gBAAAA,OAAO,CAACC,GAAR;iDACO,I;;;;;;;;;;;;;;;;;;;;;SAXQP,Y;AAgBrB,IAAMK,IAAI,GAAG,CACX;AACE,QAAM,EADR;AAEE,aAAW,EAFb;AAGE,eAAa,CAHf;AAIE,UAAQ,aAJV;AAKE,WAAS,WALX;AAME,WAAS;AANX,CADW,EASX;AACE,QAAM,CADR;AAEE,aAAW,EAFb;AAGE,eAAa,CAHf;AAIE,UAAQ,WAJV;AAKE,WAAS,WALX;AAME,WAAS;AANX,CATW,CAAb","sourcesContent":["import axios from 'axios';\n\nexport default class UsersService {\n  async getVehiclesByUserID(userID) {\n    try {\n      // return await axios.get(`https://gps-locations-api.herokuapp.com/users/${userID}/vehicles`);\n      return await new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\"data\": mock});\n        }, 500);\n      });\n    } catch (error) {\n      console.log(`Error in function getDevicesByUserID. Message: ${error}`);\n      return null;\n    }\n  }\n}\n\nconst mock = [\n  {\n    \"id\": 10,\n    \"user_id\": 10,\n    \"device_id\": 1,\n    \"type\": \"Ford Fiesta\",\n    \"plate\": \"AA 383 TI\",\n    \"model\": \"2018\"\n  },\n  {\n    \"id\": 2,\n    \"user_id\": 10,\n    \"device_id\": 3,\n    \"type\": \"Fiat Argo\",\n    \"plate\": \"AB 112 II\",\n    \"model\": \"2018\"\n  }\n];"]},"metadata":{},"sourceType":"module"}