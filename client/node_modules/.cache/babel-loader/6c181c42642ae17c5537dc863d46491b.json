{"ast":null,"code":"import _regeneratorRuntime from \"/Users/diehernandez/Workspace/gps-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/diehernandez/Workspace/gps-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/diehernandez/Workspace/gps-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/diehernandez/Workspace/gps-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n// import axios from 'axios';\nvar AlertsService =\n/*#__PURE__*/\nfunction () {\n  function AlertsService() {\n    _classCallCheck(this, AlertsService);\n  }\n\n  _createClass(AlertsService, [{\n    key: \"updateAlerts\",\n    value: function () {\n      var _updateAlerts = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(alerts) {\n        var alertsToUpdate, results;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                alertsToUpdate = [];\n                alerts.forEach(function (element) {\n                  console.log(\"element: \", element);\n                  alertsToUpdate.push(new Promise(function (resolve) {\n                    setTimeout(function () {\n                      resolve({\n                        \"status\": 200\n                      });\n                    }, 500);\n                  }));\n                });\n                _context.next = 5;\n                return Promise.all(alertsToUpdate);\n\n              case 5:\n                results = _context.sent;\n                console.log(\"results: \", results);\n\n                if (!results.filter(function (result) {\n                  return !result.status || result.status !== 200;\n                })) {\n                  _context.next = 10;\n                  break;\n                }\n\n                console.error(\"Could not update alerts: \".concat(JSON.stringify(alerts), \". Results: \").concat(results));\n                return _context.abrupt(\"return\", false);\n\n              case 10:\n                return _context.abrupt(\"return\", true);\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(\"Could not update alerts: \".concat(alerts, \". Error: \").concat(_context.t0));\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 13]]);\n      }));\n\n      function updateAlerts(_x) {\n        return _updateAlerts.apply(this, arguments);\n      }\n\n      return updateAlerts;\n    }()\n  }]);\n\n  return AlertsService;\n}(); // const mock = [\n//   {\n//     \"id\": 10,\n//     \"user_id\": 10,\n//     \"device_id\": 1,\n//     \"type\": \"Ford Fiesta\",\n//     \"plate\": \"AA 383 TI\",\n//     \"model\": \"2018\"\n//   },\n//   {\n//     \"id\": 2,\n//     \"user_id\": 10,\n//     \"device_id\": 3,\n//     \"type\": \"Fiat Argo\",\n//     \"plate\": \"AB 112 II\",\n//     \"model\": \"2018\"\n//   }\n// ];\n\n\nexport { AlertsService as default };","map":{"version":3,"sources":["/Users/diehernandez/Workspace/gps-front/src/api/services/alertsService.js"],"names":["AlertsService","alerts","alertsToUpdate","forEach","element","console","log","push","Promise","resolve","setTimeout","all","results","filter","result","status","error","JSON","stringify"],"mappings":";;;;;AAAA;IAEqBA,a;;;;;;;;;;;;gDACAC,M;;;;;;;AAEXC,gBAAAA,c,GAAiB,E;AACrBD,gBAAAA,MAAM,CAACE,OAAP,CAAe,UAAAC,OAAO,EAAI;AACxBC,kBAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,OAAzB;AACAF,kBAAAA,cAAc,CAACK,IAAf,CACE,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACrBC,oBAAAA,UAAU,CAAC,YAAM;AACfD,sBAAAA,OAAO,CAAC;AAAE,kCAAU;AAAZ,uBAAD,CAAP;AACD,qBAFS,EAEP,GAFO,CAAV;AAGD,mBAJD,CADF;AAOD,iBATD;;uBAWoBD,OAAO,CAACG,GAAR,CAAYT,cAAZ,C;;;AAAhBU,gBAAAA,O;AACJP,gBAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBM,OAAzB;;qBACIA,OAAO,CAACC,MAAR,CAAe,UAAAC,MAAM;AAAA,yBAAI,CAACA,MAAM,CAACC,MAAR,IAAkBD,MAAM,CAACC,MAAP,KAAkB,GAAxC;AAAA,iBAArB,C;;;;;AACFV,gBAAAA,OAAO,CAACW,KAAR,oCAA0CC,IAAI,CAACC,SAAL,CAAejB,MAAf,CAA1C,wBAA8EW,OAA9E;iDACO,K;;;iDAEF,I;;;;;AAGPP,gBAAAA,OAAO,CAACW,KAAR,oCAA0Cf,MAA1C;;;;;;;;;;;;;;;;;;;KAKN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SA9CqBD,a","sourcesContent":["// import axios from 'axios';\n\nexport default class AlertsService {\n  async updateAlerts(alerts) {\n    try {\n      let alertsToUpdate = [];\n      alerts.forEach(element => {\n        console.log(\"element: \", element);\n        alertsToUpdate.push(\n          new Promise(resolve => {\n            setTimeout(() => {\n              resolve({ \"status\": 200 });\n            }, 500);\n          })\n        );\n      });\n        \n      let results = await Promise.all(alertsToUpdate);\n      console.log(\"results: \", results);\n      if (results.filter(result => !result.status || result.status !== 200)) {\n        console.error(`Could not update alerts: ${JSON.stringify(alerts)}. Results: ${results}`)\n        return false;\n      }\n      return true;\n\n    } catch (error) {\n      console.error(`Could not update alerts: ${alerts}. Error: ${error}`)\n    }\n  }\n}\n\n// const mock = [\n//   {\n//     \"id\": 10,\n//     \"user_id\": 10,\n//     \"device_id\": 1,\n//     \"type\": \"Ford Fiesta\",\n//     \"plate\": \"AA 383 TI\",\n//     \"model\": \"2018\"\n//   },\n//   {\n//     \"id\": 2,\n//     \"user_id\": 10,\n//     \"device_id\": 3,\n//     \"type\": \"Fiat Argo\",\n//     \"plate\": \"AB 112 II\",\n//     \"model\": \"2018\"\n//   }\n// ];"]},"metadata":{},"sourceType":"module"}