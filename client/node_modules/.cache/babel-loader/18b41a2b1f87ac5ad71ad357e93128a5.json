{"ast":null,"code":"import _regeneratorRuntime from \"/Users/diehernandez/Workspace/gps-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/diehernandez/Workspace/gps-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/diehernandez/Workspace/gps-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/diehernandez/Workspace/gps-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n// import axios from 'axios';\nvar UsersService =\n/*#__PURE__*/\nfunction () {\n  function UsersService() {\n    _classCallCheck(this, UsersService);\n  }\n\n  _createClass(UsersService, [{\n    key: \"getCurrentLocation\",\n    value: function () {\n      var _getCurrentLocation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(vehicleID) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return new Promise(function (resolve) {\n                  setTimeout(function () {\n                    resolve({\n                      \"status\": 200,\n                      \"data\": mock\n                    });\n                  }, 500);\n                });\n\n              case 3:\n                response = _context.sent;\n\n                if (!(response.status !== 200)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                console.log(response);\n                return _context.abrupt(\"return\", []);\n\n              case 7:\n                return _context.abrupt(\"return\", response.data);\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(\"Error in function getDevicesByUserID. Message: \".concat(_context.t0));\n                return _context.abrupt(\"return\", []);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 10]]);\n      }));\n\n      function getCurrentLocation(_x) {\n        return _getCurrentLocation.apply(this, arguments);\n      }\n\n      return getCurrentLocation;\n    }()\n  }]);\n\n  return UsersService;\n}();\n\nexport { UsersService as default };\nvar mock = {\n  lat: -31.422130,\n  lng: -64.186510\n};","map":{"version":3,"sources":["/Users/diehernandez/Workspace/gps-front/src/api/services/vehiclesService.js"],"names":["UsersService","vehicleID","Promise","resolve","setTimeout","mock","response","status","console","log","data","lat","lng"],"mappings":";;;;;AAAA;IAEqBA,Y;;;;;;;;;;;;gDACMC,S;;;;;;;;uBAGE,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5CC,kBAAAA,UAAU,CAAC,YAAM;AACfD,oBAAAA,OAAO,CAAC;AAAE,gCAAU,GAAZ;AAAiB,8BAAQE;AAAzB,qBAAD,CAAP;AACD,mBAFS,EAEP,GAFO,CAAV;AAGD,iBAJsB,C;;;AAAjBC,gBAAAA,Q;;sBAKFA,QAAQ,CAACC,MAAT,KAAoB,G;;;;;AACtBC,gBAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;iDACO,E;;;iDAEFA,QAAQ,CAACI,I;;;;;AAGhBF,gBAAAA,OAAO,CAACC,GAAR;iDACO,E;;;;;;;;;;;;;;;;;;;;;SAjBQT,Y;AAsBrB,IAAMK,IAAI,GAAG;AACXM,EAAAA,GAAG,EAAE,CAAC,SADK;AAEXC,EAAAA,GAAG,EAAE,CAAC;AAFK,CAAb","sourcesContent":["// import axios from 'axios';\n\nexport default class UsersService {\n  async getCurrentLocation(vehicleID) {\n    try {\n      // return await axios.get(`https://gps-locations-api.herokuapp.com/vehicles/${vehicle_id}/location`);\n      const response = await new Promise(resolve => {\n        setTimeout(() => {\n          resolve({ \"status\": 200, \"data\": mock });\n        }, 500);\n      });\n      if (response.status !== 200) {\n        console.log(response);\n        return []\n      }\n      return response.data;\n\n    } catch (error) {\n      console.log(`Error in function getDevicesByUserID. Message: ${error}`);\n      return [];\n    }\n  }\n}\n\nconst mock = {\n  lat: -31.422130,\n  lng: -64.186510\n};"]},"metadata":{},"sourceType":"module"}